# -*- coding: utf-8 -*-
"""
Class used to hold experience.
"""
from collections import deque
from typing import Sequence

from numpy.random import choice

from alphazero.addons.config import BufferConfig
from alphazero.addons.types import Trajectory


# ##: TODO: Check and implements sampling
class ReplayBuffer:
    """
    A replay buffer to hold the experience generated by the self-play.
    """

    def __init__(self, config: BufferConfig):
        self._config = config
        self._data = deque(maxlen=config.num_trajectories)

    def __len__(self) -> int:
        return len(self._data)

    def save(self, sequence: Trajectory):
        """
        Save a sequence of state.

        Parameters
        ----------
        sequence: Trajectory
            A sequence of state
        """
        self._data.append(sequence)

    def sample_trajectory(self) -> Trajectory:
        """
        Samples a trajectory uniformly.

        Returns
        -------
        Trajectory
            A sequence of state
        """
        indice = choice(len(self._data), 1, replace=False)[0]
        return self._data[indice]

    def sample_index(self, sequence: Trajectory) -> int:
        """
        Samples an index in the trajectory uniformly.

        Parameters
        ----------
        sequence: Trajectory
            A sequence of state

        Returns
        -------
        int
            An index of state in trajectory
        """
        indice = choice(len(sequence), 1, replace=False)[0]
        return indice

    def sample_element(self) -> Trajectory:
        """
        Samples a single element from the buffer.

        Returns
        -------
        Trajectory
            A selected trajectory
        """

        # ##: Sample a trajectory.
        trajectory = self.sample_trajectory()
        state_idx = self.sample_index(trajectory)
        limit = max([self._config.num_unroll_steps, self._config.td_steps])

        # ##: Returns a trajectory of experiment.
        return trajectory[state_idx : state_idx + limit]

    def sample(self) -> Sequence[Trajectory]:
        """
        Samples a training batch.

        Returns
        -------
        Sequence
            A sequence of trajectory
        """
        return [self.sample_element() for _ in range(self._config.batch_size)]
